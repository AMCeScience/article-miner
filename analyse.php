<?php

// Article Miner, a document parser for Pubmed, Pubmed Central, Ovid, Scopus, and Web of Science
// Copyright (C) 2016 Allard van Altena

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

$time_start = microtime(true);

require_once("config.php");
require_once("database.php");

$db = new Connector();

$db->connect($config);

require_once("models/articles.php");
require_once("models/outcomes.php");
require_once("models/alchemy_outcomes.php");
require_once("models/alchemy_transactions.php");
require_once("models/scriptchecker.php");

$article_model = new Articles();
$outcome_model = new Outcomes();
$alchemy_outcome_model = new AlchemyOutcomes();
$alchemy_transactions_model = new AlchemyTransactions();

require_once("alchemyAPI/alchemyapi.php");

// Initialise Alchemy with key
$alchemyapi = new AlchemyAPI($config["alchemy_key_dir"]);

// Get key transaction status
$transactions_before = $alchemyapi->transactioninfo();

if ($transactions_before["status"] == "OK") {
  $transaction_limit = $transactions_before["dailyTransactionLimit"] * 1;
  $transactions_consumed = $transactions_before["consumedDailyTransactions"] * 1;

  echo "Transactions used today: " . $transactions_consumed . "<br/>";
  echo "Transaction limit today: " . $transaction_limit . "<br/>";

  if ($transaction_limit <= $transactions_consumed || $transaction_limit <= $alchemy_transactions_model->used_today($db)) {
    echo "Already over transaction limit, quitting...<br/>";

    echo "<a href='/index.php'>Back to index page</a>";
    exit;
  }
} else {
  echo "No response from API, quitting...<br/>";

  echo "<a href='/index.php'>Back to index page</a>";
  exit;
}

$safety_catch = 0;
$article_count = 0;
$transactions_this_run = 0;

// Loop for the allowed amount of alchemy transactions
while ($transactions_consumed <= $transaction_limit && $transactions_this_run < $config["alchemy_spending_transactions_per_run"] && $safety_catch < $config["alchemy_safety_catch"]) {
  $required_alchemy_items = $config["alchemy_collect"];

  // Get article id for the next article to process
  $this_outcome = $outcome_model->next($db, $required_alchemy_items);
  
  if (!$this_outcome) {
    echo "No outcome was selected";

    break;
  }

  // Find the next article to process
  $this_article = $article_model->find_by_id($db, $this_outcome["article_id"]);

  $items_todo = array_diff($required_alchemy_items, $this_outcome["done"]);
  
  if (count($items_todo) == 0) {
    // We are done here, move to next article
    continue;
  }

  // If article exists
  if ($this_article) {
    $options["extract"] = implode(",", $items_todo);
      
    // Get response
    $response = $alchemyapi->combined('text', $this_article["title"] . " " . $this_article["abstract"], $options);
    
    // DEV response
    // $response = array(
    //   "status" => "OK", 
    //   "usage" => "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
    //   "totalTransactions" => 4,
    //   "language" => "english",
    //   "keywords" => array(
    //     array("text" => "fancy iPhone", "relevance" => 0.983037),
    //     array("text" => "dumb Bob", "relevance" => 0.904227),
    //     array("text" => "beautiful Denver", "relevance" => 0.835704),
    //     array("text" => "Apple Store", "relevance" => 0.721868),
    //     array("text" => "Colorado", "relevance" => 0.38689)
    //   ),
    //   "concepts" => array(
    //     array("text" => "Apple Store", "relevance" => 0.932431),
    //     array("text" => "Apple Inc.", "relevance" => 0.891859)
    //   ),
    //   "entities" => array(
    //     array("type" => "FieldTerminology", "relevance" => 0.884345, "count" => 1, "text" => "Apple Store"),
    //     array("type" => "Technology", "relevance" => 0.728395, "count" => 1, "text" => "iPhone")
    //   ),
    //   "taxonomy" => array(
    //     array("label" => "/shopping/retail/online stores", "score" => 0.692631),
    //     array("confident" => "no", "label" => "/technology and computing/consumer electronics/telephones/mobile phones/smart phones", "score" => 0.212776),
    //     array("confident" => "no", "label" => "/style and fashion/clothing/pants", "score" => 0.14874)
    //   )
    // );

    if (!isset($response["totalTransactions"])) {
      $response["totalTransactions"] = 1;
    }

    // Update used transactions
    $transactions_this_run += $response["totalTransactions"];
    $transactions_consumed += $response["totalTransactions"];
    
    // Got response
    if ($response["status"] == "OK") {
      if (isset($response["keywords"])) {
        // Insert keywords
        $keywords = $response["keywords"];

        foreach ($keywords as $keyword) {
          $alchemy_outcome_model->insert_keyword($db, $keyword, $this_outcome["outcome_id"]);
        }
      }

      if (isset($response["concepts"])) {
        // Insert concepts
        $concepts = $response["concepts"];

        foreach ($concepts as $concept) {
          $alchemy_outcome_model->insert_concept($db, $concept, $this_outcome["outcome_id"]);
        }
      }

      if (isset($response["entities"])) {
        // Insert entities
        $entities = $response["entities"];

        foreach ($entities as $entity) {
          $alchemy_outcome_model->insert_entity($db, $entity, $this_outcome["outcome_id"]);
        }
      }

      if (isset($response["taxonomy"])) {
        // Insert taxonomy
        $taxonomies = $response["taxonomy"];

        foreach ($taxonomies as $taxonomy) {
          $alchemy_outcome_model->insert_taxonomy($db, $taxonomy, $this_outcome["outcome_id"]);
        }
      }
    } else {
      echo "Error in the taxonomy call: " . $response["statusInfo"] . "<br/>";

      // Break out of the while loop
      break;
    }
  } else {
    echo "Error: no next article.<br/>";

    // Break out of the while loop
    break;
  }

  // Update outcome
  $outcome_model->update($db, $this_outcome["outcome_id"], $items_todo);

  $safety_catch++;
  $article_count++;
}

$alchemy_transactions_model->update_today($db, $transactions_this_run);

echo "<br/>Done<br/><br/>";

$transactions_after = $alchemyapi->transactioninfo();

echo "<span style=\"font-weight: bold; font-size: 18px;\">AlchemyAPI results:</span><br/>";
echo "Used transactions: " . $transactions_after["consumedDailyTransactions"] . "<br/>";
echo "Allowed transactions: " . $transactions_after["dailyTransactionLimit"] . "<br/>";

echo "<span style=\"font-weight: bold; font-size: 18px;\">Database results:</span><br/>";
echo "Counted transactions: " . $transactions_this_run . "<br/>";
echo "Articles ran: " . $article_count . "<br/>";
echo "Transactions per article: " . $transactions_this_run / $article_count . "</br>";

// The API doesn't update fast enough for this to be displayed correctly
//$db_used = $alchemy_transactions_model->used_today($db);
//echo "DB and API transaction amounts similar: " . ($db_used === $transactions_after["consumedDailyTransactions"] ? 'true' : 'false') . "<br/>";

echo "<br/>";

echo "Time elapsed: " . (microtime(true) - $time_start) . "s <br/>";

echo "<a href='/index.php'>Back to index page</a>";